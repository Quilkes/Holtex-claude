{
  createdAt: "2025-04-23T10:16:26.007Z",
  files: [
    {
      children: [
        {
          children: [
            {
              content: `import React, { useState } from 'react';
import { PlusCircle } from 'lucide-react';

interface TodoInputProps {
  onAdd: (text: string) => void;
}

export function TodoInput({ onAdd }: TodoInputProps) {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim()) {
      onAdd(text);
      setText('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="w-full">
      <div className="relative">
        <input
          type="text"
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Add a new task..."
          className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <button
          type="submit"
          className="absolute right-2 top-1/2 -translate-y-1/2 text-blue-500 hover:text-blue-600 transition-colors"
        >
          <PlusCircle size={24} />
        </button>
      </div>
    </form>
  );
}`,
              name: "TodoInput.tsx",
              path: "/src/components/TodoInput.tsx",
              type: "file",
            },
            {
              content: `import { Check, Trash2, X } from 'lucide-react';
import { Todo } from '../types/todo';

interface TodoItemProps {
  todo: Todo;
  onToggle: (id: string) => void;
  onDelete: (id: string) => void;
}

export function TodoItem({ todo, onToggle, onDelete }: TodoItemProps) {
  return (
    <div className="flex items-center justify-between gap-4 p-4 bg-white rounded-lg shadow-sm border border-gray-100 transition-all hover:shadow-md">
      <div className="flex items-center gap-3 flex-1">
        <button
          onClick={() => onToggle(todo.id)}
          className={\`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors \${
            todo.completed
              ? 'bg-green-500 border-green-500'
              : 'border-gray-300 hover:border-green-500'
          }\`}
        >
          {todo.completed && <Check size={14} className="text-white" />}
        </button>
        <span
          className={\`flex-1 \${
            todo.completed ? 'text-gray-400 line-through' : 'text-gray-700'
          }\`}
        >
          {todo.text}
        </span>
      </div>
      <button
        onClick={() => onDelete(todo.id)}
        className="text-gray-400 hover:text-red-500 transition-colors"
      >
        <Trash2 size={18} />
      </button>
    </div>
  );
}`,
              name: "TodoItem.tsx",
              path: "/src/components/TodoItem.tsx",
              type: "file",
            },
            {
              content: `import { Todo } from '../types/todo';
import { TodoItem } from './TodoItem';

interface TodoListProps {
  todos: Todo[];
  onToggle: (id: string) => void;
  onDelete: (id: string) => void;
}

export function TodoList({ todos, onToggle, onDelete }: TodoListProps) {
  if (todos.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        No tasks yet. Add one above!
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {todos.map((todo) => (
        <TodoItem
          key={todo.id}
          todo={todo}
          onToggle={onToggle}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
}`,
              name: "TodoList.tsx",
              path: "/src/components/TodoList.tsx",
              type: "file",
            },
          ],
          name: "components",
          path: "/src/components",
          type: "folder",
        },
        {
          children: [
            {
              content: `export interface Todo {
  id: string;
  text: string;
  completed: boolean;
  createdAt: Date;
}`,
              name: "todo.ts",
              path: "/src/types/todo.ts",
              type: "file",
            },
          ],
          name: "types",
          path: "/src/types",
          type: "folder",
        },
        {
          content: `import { useState } from 'react';
import { CheckCircle } from 'lucide-react';
import { TodoInput } from './components/TodoInput';
import { TodoList } from './components/TodoList';
import { Todo } from './types/todo';

function App() {
  const [todos, setTodos] = useState<Todo[]>([]);

  const addTodo = (text: string) => {
    const newTodo: Todo = {
      id: crypto.randomUUID(),
      text,
      completed: false,
      createdAt: new Date(),
    };
    setTodos((prev) => [...prev, newTodo]);
  };

  const toggleTodo = (id: string) => {
    setTodos((prev) =>
      prev.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const deleteTodo = (id: string) => {
    setTodos((prev) => prev.filter((todo) => todo.id !== id));
  };

  const completedCount = todos.filter((todo) => todo.completed).length;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-2xl mx-auto py-12 px-4">
        <div className="bg-white rounded-xl shadow-lg p-6 md:p-8">
          <div className="flex items-center gap-3 mb-8">
            <CheckCircle className="w-8 h-8 text-blue-500" />
            <h1 className="text-2xl font-semibold text-gray-800">Todo List</h1>
          </div>

          <TodoInput onAdd={addTodo} />

          <div className="mt-2 text-sm text-gray-500">
            {completedCount} of {todos.length} tasks completed
          </div>

          <div className="mt-8">
            <TodoList
              todos={todos}
              onToggle={toggleTodo}
              onDelete={deleteTodo}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;`,
          name: "App.tsx",
          path: "/src/App.tsx",
          type: "file",
        },
        {
          content: `@tailwind base;
@tailwind components;
@tailwind utilities;`,
          name: "index.css",
          path: "/src/index.css",
          type: "file",
        },
        {
          content: `import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);`,
          name: "main.tsx",
          path: "/src/main.tsx",
          type: "file",
        },
        {
          content: '/// <reference types="vite/client" />',
          name: "vite-env.d.ts",
          path: "/src/vite-env.d.ts",
          type: "file",
        },
      ],
      name: "src",
      path: "/src",
      type: "folder",
    },
    {
      content: `import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);`,
      name: "eslint.config.js",
      path: "/eslint.config.js",
      type: "file",
    },
    {
      content: `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`,
      name: "index.html",
      path: "/index.html",
      type: "file",
    },
    {
      content: `{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}`,
      name: "package.json",
      path: "/package.json",
      type: "file",
    },
    {
      content: `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      name: "postcss.config.js",
      path: "/postcss.config.js",
      type: "file",
    },
    {
      content: `/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};`,
      name: "tailwind.config.js",
      path: "/tailwind.config.js",
      type: "file",
    },
    {
      content: `{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}`,
      name: "tsconfig.app.json",
      path: "/tsconfig.app.json",
      type: "file",
    },
    {
      content: `{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}`,
      name: "tsconfig.json",
      path: "/tsconfig.json",
      type: "file",
    },
    {
      content: `{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}`,
      name: "tsconfig.node.json",
      path: "/tsconfig.node.json",
      type: "file",
    },
    {
      content: `import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});`,
      name: "vite.config.ts",
      path: "/vite.config.ts",
      type: "file",
    },
  ],
  llmMessages: [],
  steps: [
    {
      description: "",
      id: "87d37c63-4650-4887-a997-8ed2d4ae7275",
      status: "completed",
      title: "Project Files",
      type: "CreateFolder",
    },
    {
      code: `import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);`,
      description: "",
      id: "4ba158c0-226e-4656-a16b-7313de910337",
      path: "eslint.config.js",
      status: "completed",
      title: "Create eslint.config.js",
      type: "CreateFile",
    },
    {
      code: `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`,
      description: "",
      id: "a7e9d683-91c6-4408-8b8d-9d427de7de72",
      path: "index.html",
      status: "completed",
      title: "Create index.html",
      type: "CreateFile",
    },
    {
      code: `{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}`,
      description: "",
      id: "601e3d72-d530-4ddf-8142-3364094587b2",
      path: "package.json",
      status: "completed",
      title: "Create package.json",
      type: "CreateFile",
    },
    {
      code: `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      description: "",
      id: "0b949370-b1a6-4bd6-a6a3-c9591fa83dc4",
      path: "postcss.config.js",
      status: "completed",
      title: "Create postcss.config.js",
      type: "CreateFile",
    },
    {
      code: `/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};`,
      description: "",
      id: "2e270161-cd8f-4446-a5da-809a6ab9a73e",
      path: "tailwind.config.js",
      status: "completed",
      title: "Create tailwind.config.js",
      type: "CreateFile",
    },
    {
      code: `{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}`,
      description: "",
      id: "261f0aa0-c6bf-4214-bd3d-be35d59335d5",
      path: "tsconfig.app.json",
      status: "completed",
      title: "Create tsconfig.app.json",
      type: "CreateFile",
    },
    {
      code: `{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}`,
      description: "",
      id: "2a2d14e9-b36e-4373-a009-aa109107ba0e",
      path: "tsconfig.json",
      status: "completed",
      title: "Create tsconfig.json",
      type: "CreateFile",
    },
    {
      code: `{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}`,
      description: "",
      id: "ba083c1c-8a20-497c-bf79-c89951d90f5e",
      path: "tsconfig.node.json",
      status: "completed",
      title: "Create tsconfig.node.json",
      type: "CreateFile",
    },
    {
      code: `import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});`,
      description: "",
      id: "81ebea99-9796-4d8a-94bf-64f96e9a2a8f",
      path: "vite.config.ts",
      status: "completed",
      title: "Create vite.config.ts",
      type: "CreateFile",
    },
    {
      code: `import React from 'react';

function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <p>Start prompting (or editing) to see magic happen :)</p>
    </div>
  );
}

export default App;`,
      description: "",
      id: "45c2671d-e962-44e4-8bc1-e93c61e056e3",
      path: "src/App.tsx",
      status: "completed",
      title: "Create src/App.tsx",
      type: "CreateFile",
    },
    {
      code: `@tailwind base;
@tailwind components;
@tailwind utilities;`,
      description: "",
      id: "b25e4eba-63ed-44f4-9401-02179b842497",
      path: "src/index.css",
      status: "completed",
      title: "Create src/index.css",
      type: "CreateFile",
    },
    {
      code: `import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);`,
      description: "",
      id: "8b758b84-4a9f-4d94-b787-70bb54e6ceea",
      path: "src/main.tsx",
      status: "completed",
      title: "Create src/main.tsx",
      type: "CreateFile",
    },
    {
      code: '/// <reference types="vite/client" />',
      description: "",
      id: "b9456939-02ad-487c-a101-0a251adf3571",
      path: "src/vite-env.d.ts",
      status: "completed",
      title: "Create src/vite-env.d.ts",
      type: "CreateFile",
    },
    {
      description: "",
      id: "6205ef92-9840-4390-b13b-646ea94c99e9",
      status: "completed",
      title: "Modern Todo Application",
      type: "CreateFolder",
    },
    {
      code: `export interface Todo {
  id: string;
  text: string;
  completed: boolean;
  createdAt: Date;
}`,
      description: "",
      id: "3c5ceca0-c8a4-4903-a7ea-2735e10ed212",
      path: "src/types/todo.ts",
      status: "completed",
      title: "Create src/types/todo.ts",
      type: "CreateFile",
    },
    {
      code: `import React, { useState } from 'react';
import { PlusCircle } from 'lucide-react';

interface TodoInputProps {
  onAdd: (text: string) => void;
}

export function TodoInput({ onAdd }: TodoInputProps) {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim()) {
      onAdd(text);
      setText('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="w-full">
      <div className="relative">
        <input
          type="text"
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Add a new task..."
          className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <button
          type="submit"
          className="absolute right-2 top-1/2 -translate-y-1/2 text-blue-500 hover:text-blue-600 transition-colors"
        >
          <PlusCircle size={24} />
        </button>
      </div>
    </form>
  );
}`,
      description: "",
      id: "0d0e08f2-c1a8-4035-ba0f-5a294e025936",
      path: "src/components/TodoInput.tsx",
      status: "completed",
      title: "Create src/components/TodoInput.tsx",
      type: "CreateFile",
    },
    {
      code: `import { Check, Trash2, X } from 'lucide-react';
import { Todo } from '../types/todo';

interface TodoItemProps {
  todo: Todo;
  onToggle: (id: string) => void;
  onDelete: (id: string) => void;
}

export function TodoItem({ todo, onToggle, onDelete }: TodoItemProps) {
  return (
    <div className="flex items-center justify-between gap-4 p-4 bg-white rounded-lg shadow-sm border border-gray-100 transition-all hover:shadow-md">
      <div className="flex items-center gap-3 flex-1">
        <button
          onClick={() => onToggle(todo.id)}
          className={\`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors \${
            todo.completed
              ? 'bg-green-500 border-green-500'
              : 'border-gray-300 hover:border-green-500'
          }\`}
        >
          {todo.completed && <Check size={14} className="text-white" />}
        </button>
        <span
          className={\`flex-1 \${
            todo.completed ? 'text-gray-400 line-through' : 'text-gray-700'
          }\`}
        >
          {todo.text}
        </span>
      </div>
      <button
        onClick={() => onDelete(todo.id)}
        className="text-gray-400 hover:text-red-500 transition-colors"
      >
        <Trash2 size={18} />
      </button>
    </div>
  );
}`,
      description: "",
      id: "0980441d-4695-4416-913e-02b89aa7f4ab",
      path: "src/components/TodoItem.tsx",
      status: "completed",
      title: "Create src/components/TodoItem.tsx",
      type: "CreateFile",
    },
    {
      code: `import { Todo } from '../types/todo';
import { TodoItem } from './TodoItem';

interface TodoListProps {
  todos: Todo[];
  onToggle: (id: string) => void;
  onDelete: (id: string) => void;
}

export function TodoList({ todos, onToggle, onDelete }: TodoListProps) {
  if (todos.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        No tasks yet. Add one above!
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {todos.map((todo) => (
        <TodoItem
          key={todo.id}
          todo={todo}
          onToggle={onToggle}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
}`,
      description: "",
      id: "3edbc926-4484-44ba-99d1-fd6ae65f039e",
      path: "src/components/TodoList.tsx",
      status: "completed",
      title: "Create src/components/TodoList.tsx",
      type: "CreateFile",
    },
    {
      code: `import { useState } from 'react';
import { CheckCircle } from 'lucide-react';
import { TodoInput } from './components/TodoInput';
import { TodoList } from './components/TodoList';
import { Todo } from './types/todo';

function App() {
  const [todos, setTodos] = useState<Todo[]>([]);

  const addTodo = (text: string) => {
    const newTodo: Todo = {
      id: crypto.randomUUID(),
      text,
      completed: false,
      createdAt: new Date(),
    };
    setTodos((prev) => [...prev, newTodo]);
  };

  const toggleTodo = (id: string) => {
    setTodos((prev) =>
      prev.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const deleteTodo = (id: string) => {
    setTodos((prev) => prev.filter((todo) => todo.id !== id));
  };

  const completedCount = todos.filter((todo) => todo.completed).length;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-2xl mx-auto py-12 px-4">
        <div className="bg-white rounded-xl shadow-lg p-6 md:p-8">
          <div className="flex items-center gap-3 mb-8">
            <CheckCircle className="w-8 h-8 text-blue-500" />
            <h1 className="text-2xl font-semibold text-gray-800">Todo List</h1>
          </div>

          <TodoInput onAdd={addTodo} />

          <div className="mt-2 text-sm text-gray-500">
            {completedCount} of {todos.length} tasks completed
          </div>

          <div className="mt-8">
            <TodoList
              todos={todos}
              onToggle={toggleTodo}
              onDelete={deleteTodo}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;`,
      description: "",
      id: "6555dce7-4e41-48ea-949c-a6fdc1cb625d",
      path: "src/App.tsx",
      status: "completed",
      title: "Create src/App.tsx",
      type: "CreateFile",
    },
    {
      code: "npm run dev",
      description: "",
      id: "05db5dd1-c6d8-4bb1-aa86-cd9559008fb0",
      status: "completed",
      title: "Run command",
      type: "RunScript",
    },
  ],
}