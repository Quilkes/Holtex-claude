{
    createdAt: "2025-04-24T17:44:52.853Z",
    files: [
      {
        children: [
          {
            children: [
              {
                content: `import { useState } from 'react';
  import { UserPlus, LogIn, Mail, Lock, User, ArrowRight, Github, Twitter } from 'lucide-react';
  
  type AuthMode = 'login' | 'signup';
  
  export default function AuthForm() {
    const [mode, setMode] = useState<AuthMode>('login');
    const [isLoading, setIsLoading] = useState(false);
  
    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      setIsLoading(true);
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setIsLoading(false);
    };
  
    return (
      <div className="w-full max-w-md">
        <div className="bg-white shadow-2xl rounded-2xl overflow-hidden">
          {/* Mode Switch */}
          <div className="flex">
            <button
              className={\`flex-1 p-4 text-center transition-colors \${
                mode === 'login'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
              }\`}
              onClick={() => setMode('login')}
            >
              <LogIn className="inline-block mr-2 h-5 w-5" />
              Login
            </button>
            <button
              className={\`flex-1 p-4 text-center transition-colors \${
                mode === 'signup'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
              }\`}
              onClick={() => setMode('signup')}
            >
              <UserPlus className="inline-block mr-2 h-5 w-5" />
              Sign Up
            </button>
          </div>
  
          <div className="p-8">
            <h2 className="text-2xl font-bold text-gray-800 text-center mb-8">
              {mode === 'login' ? 'Welcome back!' : 'Create your account'}
            </h2>
  
            <form onSubmit={handleSubmit}>
              {mode === 'signup' && (
                <div className="mb-4">
                  <label className="block text-gray-700 text-sm font-bold mb-2">
                    Full Name
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                    <input
                      type="text"
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="John Doe"
                      required
                    />
                  </div>
                </div>
              )}
  
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="email"
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="you@example.com"
                    required
                  />
                </div>
              </div>
  
              <div className="mb-6">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="password"
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="••••••••"
                    required
                  />
                </div>
              </div>
  
              <button
                type="submit"
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <>
                    {mode === 'login' ? 'Sign In' : 'Create Account'}
                    <ArrowRight className="ml-2 h-5 w-5" />
                  </>
                )}
              </button>
  
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-300"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-white text-gray-500">
                      Or continue with
                    </span>
                  </div>
                </div>
  
                <div className="mt-6 grid grid-cols-2 gap-3">
                  <button
                    type="button"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-center"
                  >
                    <Github className="h-5 w-5 mr-2" />
                    Github
                  </button>
                  <button
                    type="button"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-center"
                  >
                    <Twitter className="h-5 w-5 mr-2" />
                    Twitter
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
  
        <p className="text-center mt-4 text-sm text-gray-600">
          {mode === 'login' ? "Don't have an account? " : 'Already have an account? '}
          <button
            onClick={() => setMode(mode === 'login' ? 'signup' : 'login')}
            className="text-blue-600 hover:underline font-medium"
          >
            {mode === 'login' ? 'Sign up' : 'Sign in'}
          </button>
        </p>
      </div>
    );
  }`,
                name: "AuthForm.tsx",
                path: "/src/components/AuthForm.tsx",
                type: "file",
              },
            ],
            name: "components",
            path: "/src/components",
            type: "folder",
          },
          {
            content: `import AuthForm from './components/AuthForm';
  
  function App() {
    return (
      <div 
        className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 flex items-center justify-center p-4"
        style={{
          backgroundImage: \`url('https://images.unsplash.com/photo-1634655377962-e6e7b446e7e9?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3')\`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      >
        <div className="absolute inset-0 bg-white/30 backdrop-blur-sm" />
        <div className="relative">
          <AuthForm />
        </div>
      </div>
    );
  }
  
  export default App;`,
            name: "App.tsx",
            path: "/src/App.tsx",
            type: "file",
          },
          {
            content: `@tailwind base;
  @tailwind components;
  @tailwind utilities;`,
            name: "index.css",
            path: "/src/index.css",
            type: "file",
          },
          {
            content: `import { StrictMode } from 'react';
  import { createRoot } from 'react-dom/client';
  import App from './App.tsx';
  import './index.css';
  
  createRoot(document.getElementById('root')!).render(
    <StrictMode>
      <App />
    </StrictMode>
  );`,
            name: "main.tsx",
            path: "/src/main.tsx",
            type: "file",
          },
          {
            content: '/// <reference types="vite/client" />',
            name: "vite-env.d.ts",
            path: "/src/vite-env.d.ts",
            type: "file",
          },
        ],
        name: "src",
        path: "/src",
        type: "folder",
      },
      {
        content: `import js from '@eslint/js';
  import globals from 'globals';
  import reactHooks from 'eslint-plugin-react-hooks';
  import reactRefresh from 'eslint-plugin-react-refresh';
  import tseslint from 'typescript-eslint';
  
  export default tseslint.config(
    { ignores: ['dist'] },
    {
      extends: [js.configs.recommended, ...tseslint.configs.recommended],
      files: ['**/*.{ts,tsx}'],
      languageOptions: {
        ecmaVersion: 2020,
        globals: globals.browser,
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh,
      },
      rules: {
        ...reactHooks.configs.recommended.rules,
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true },
        ],
      },
    }
  );`,
        name: "eslint.config.js",
        path: "/eslint.config.js",
        type: "file",
      },
      {
        content: `<!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/vite.svg" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Vite + React + TS</title>
    </head>
    <body>
      <div id="root"></div>
      <script type="module" src="/src/main.tsx"></script>
    </body>
  </html>`,
        name: "index.html",
        path: "/index.html",
        type: "file",
      },
      {
        content: `{
    "name": "vite-react-typescript-starter",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
      "dev": "vite",
      "build": "vite build",
      "lint": "eslint .",
      "preview": "vite preview"
    },
    "dependencies": {
      "lucide-react": "^0.344.0",
      "react": "^18.3.1",
      "react-dom": "^18.3.1"
    },
    "devDependencies": {
      "@eslint/js": "^9.9.1",
      "@types/react": "^18.3.5",
      "@types/react-dom": "^18.3.0",
      "@vitejs/plugin-react": "^4.3.1",
      "autoprefixer": "^10.4.18",
      "eslint": "^9.9.1",
      "eslint-plugin-react-hooks": "^5.1.0-rc.0",
      "eslint-plugin-react-refresh": "^0.4.11",
      "globals": "^15.9.0",
      "postcss": "^8.4.35",
      "tailwindcss": "^3.4.1",
      "typescript": "^5.5.3",
      "typescript-eslint": "^8.3.0",
      "vite": "^5.4.2"
    }
  }`,
        name: "package.json",
        path: "/package.json",
        type: "file",
      },
      {
        content: `export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };`,
        name: "postcss.config.js",
        path: "/postcss.config.js",
        type: "file",
      },
      {
        content: `/** @type {import('tailwindcss').Config} */
  export default {
    content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
    theme: {
      extend: {},
    },
    plugins: [],
  };`,
        name: "tailwind.config.js",
        path: "/tailwind.config.js",
        type: "file",
      },
      {
        content: `{
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
  }`,
        name: "tsconfig.app.json",
        path: "/tsconfig.app.json",
        type: "file",
      },
      {
        content: `{
    "files": [],
    "references": [
      { "path": "./tsconfig.app.json" },
      { "path": "./tsconfig.node.json" }
    ]
  }`,
        name: "tsconfig.json",
        path: "/tsconfig.json",
        type: "file",
      },
      {
        content: `{
    "compilerOptions": {
      "target": "ES2022",
      "lib": ["ES2023"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["vite.config.ts"]
  }`,
        name: "tsconfig.node.json",
        path: "/tsconfig.node.json",
        type: "file",
      },
      {
        content: `import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';
  
  // https://vitejs.dev/config/
  export default defineConfig({
    plugins: [react()],
    optimizeDeps: {
      exclude: ['lucide-react'],
    },
  });`,
        name: "vite.config.ts",
        path: "/vite.config.ts",
        type: "file",
      },
    ],
    steps: [
      {
        description: "",
        id: "36116cf3-f295-430b-b059-ed75f21d6328",
        status: "completed",
        title: "Project Files",
        type: "CreateFolder",
      },
      {
        code: `import js from '@eslint/js';
  import globals from 'globals';
  import reactHooks from 'eslint-plugin-react-hooks';
  import reactRefresh from 'eslint-plugin-react-refresh';
  import tseslint from 'typescript-eslint';
  
  export default tseslint.config(
    { ignores: ['dist'] },
    {
      extends: [js.configs.recommended, ...tseslint.configs.recommended],
      files: ['**/*.{ts,tsx}'],
      languageOptions: {
        ecmaVersion: 2020,
        globals: globals.browser,
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh,
      },
      rules: {
        ...reactHooks.configs.recommended.rules,
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true },
        ],
      },
    }
  );`,
        description: "",
        id: "feab3c62-3c52-47a7-a687-5ce69b2e6a0b",
        path: "eslint.config.js",
        status: "completed",
        title: "Create eslint.config.js",
        type: "CreateFile",
      },
      {
        code: `<!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/vite.svg" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Vite + React + TS</title>
    </head>
    <body>
      <div id="root"></div>
      <script type="module" src="/src/main.tsx"></script>
    </body>
  </html>`,
        description: "",
        id: "d0750af2-e874-4909-a8bd-50d8bd58003c",
        path: "index.html",
        status: "completed",
        title: "Create index.html",
        type: "CreateFile",
      },
      {
        code: `{
    "name": "vite-react-typescript-starter",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
      "dev": "vite",
      "build": "vite build",
      "lint": "eslint .",
      "preview": "vite preview"
    },
    "dependencies": {
      "lucide-react": "^0.344.0",
      "react": "^18.3.1",
      "react-dom": "^18.3.1"
    },
    "devDependencies": {
      "@eslint/js": "^9.9.1",
      "@types/react": "^18.3.5",
      "@types/react-dom": "^18.3.0",
      "@vitejs/plugin-react": "^4.3.1",
      "autoprefixer": "^10.4.18",
      "eslint": "^9.9.1",
      "eslint-plugin-react-hooks": "^5.1.0-rc.0",
      "eslint-plugin-react-refresh": "^0.4.11",
      "globals": "^15.9.0",
      "postcss": "^8.4.35",
      "tailwindcss": "^3.4.1",
      "typescript": "^5.5.3",
      "typescript-eslint": "^8.3.0",
      "vite": "^5.4.2"
    }
  }`,
        description: "",
        id: "9ec8e467-4fbc-4aec-817f-1c671bcc933e",
        path: "package.json",
        status: "completed",
        title: "Create package.json",
        type: "CreateFile",
      },
      {
        code: `export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };`,
        description: "",
        id: "28b8555e-4ab4-4e39-a9c8-76e53f0eba7a",
        path: "postcss.config.js",
        status: "completed",
        title: "Create postcss.config.js",
        type: "CreateFile",
      },
      {
        code: `/** @type {import('tailwindcss').Config} */
  export default {
    content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
    theme: {
      extend: {},
    },
    plugins: [],
  };`,
        description: "",
        id: "607655dd-6990-4ec5-a264-6a404bcd6dce",
        path: "tailwind.config.js",
        status: "completed",
        title: "Create tailwind.config.js",
        type: "CreateFile",
      },
      {
        code: `{
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
  }`,
        description: "",
        id: "f176bc05-ff7b-43df-b8db-04b0278a0662",
        path: "tsconfig.app.json",
        status: "completed",
        title: "Create tsconfig.app.json",
        type: "CreateFile",
      },
      {
        code: `{
    "files": [],
    "references": [
      { "path": "./tsconfig.app.json" },
      { "path": "./tsconfig.node.json" }
    ]
  }`,
        description: "",
        id: "1fcc7227-2028-47d2-9e3f-ce0e1ad6e298",
        path: "tsconfig.json",
        status: "completed",
        title: "Create tsconfig.json",
        type: "CreateFile",
      },
      {
        code: `{
    "compilerOptions": {
      "target": "ES2022",
      "lib": ["ES2023"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["vite.config.ts"]
  }`,
        description: "",
        id: "db4f26ad-2c5c-4d73-bb4f-7dc26c69e8e3",
        path: "tsconfig.node.json",
        status: "completed",
        title: "Create tsconfig.node.json",
        type: "CreateFile",
      },
      {
        code: `import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';
  
  // https://vitejs.dev/config/
  export default defineConfig({
    plugins: [react()],
    optimizeDeps: {
      exclude: ['lucide-react'],
    },
  });`,
        description: "",
        id: "c775475a-9aad-4e01-86fa-28aeb71f6297",
        path: "vite.config.ts",
        status: "completed",
        title: "Create vite.config.ts",
        type: "CreateFile",
      },
      {
        code: `import React from 'react';
  
  function App() {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <p>Start prompting (or editing) to see magic happen :)</p>
      </div>
    );
  }
  
  export default App;`,
        description: "",
        id: "844f9582-65e5-4b1f-bb8b-5b2908267732",
        path: "src/App.tsx",
        status: "completed",
        title: "Create src/App.tsx",
        type: "CreateFile",
      },
      {
        code: `@tailwind base;
  @tailwind components;
  @tailwind utilities;`,
        description: "",
        id: "e8ab4a00-a5d3-4af6-af4b-601f6be3e990",
        path: "src/index.css",
        status: "completed",
        title: "Create src/index.css",
        type: "CreateFile",
      },
      {
        code: `import { StrictMode } from 'react';
  import { createRoot } from 'react-dom/client';
  import App from './App.tsx';
  import './index.css';
  
  createRoot(document.getElementById('root')!).render(
    <StrictMode>
      <App />
    </StrictMode>
  );`,
        description: "",
        id: "04921167-1c35-47da-9ae5-95db374fa78b",
        path: "src/main.tsx",
        status: "completed",
        title: "Create src/main.tsx",
        type: "CreateFile",
      },
      {
        code: '/// <reference types="vite/client" />',
        description: "",
        id: "daf12fb0-1de1-4e87-9ea6-95b07ffdc082",
        path: "src/vite-env.d.ts",
        status: "completed",
        title: "Create src/vite-env.d.ts",
        type: "CreateFile",
      },
      {
        description: "",
        id: "5ea93735-e3e9-4964-84e4-cab6a038bfc6",
        status: "completed",
        title: "Modern Login/Signup Screen",
        type: "CreateFolder",
      },
      {
        code: `import { useState } from 'react';
  import { UserPlus, LogIn, Mail, Lock, User, ArrowRight, Github, Twitter } from 'lucide-react';
  
  type AuthMode = 'login' | 'signup';
  
  export default function AuthForm() {
    const [mode, setMode] = useState<AuthMode>('login');
    const [isLoading, setIsLoading] = useState(false);
  
    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      setIsLoading(true);
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setIsLoading(false);
    };
  
    return (
      <div className="w-full max-w-md">
        <div className="bg-white shadow-2xl rounded-2xl overflow-hidden">
          {/* Mode Switch */}
          <div className="flex">
            <button
              className={\`flex-1 p-4 text-center transition-colors \${
                mode === 'login'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
              }\`}
              onClick={() => setMode('login')}
            >
              <LogIn className="inline-block mr-2 h-5 w-5" />
              Login
            </button>
            <button
              className={\`flex-1 p-4 text-center transition-colors \${
                mode === 'signup'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
              }\`}
              onClick={() => setMode('signup')}
            >
              <UserPlus className="inline-block mr-2 h-5 w-5" />
              Sign Up
            </button>
          </div>
  
          <div className="p-8">
            <h2 className="text-2xl font-bold text-gray-800 text-center mb-8">
              {mode === 'login' ? 'Welcome back!' : 'Create your account'}
            </h2>
  
            <form onSubmit={handleSubmit}>
              {mode === 'signup' && (
                <div className="mb-4">
                  <label className="block text-gray-700 text-sm font-bold mb-2">
                    Full Name
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                    <input
                      type="text"
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="John Doe"
                      required
                    />
                  </div>
                </div>
              )}
  
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="email"
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="you@example.com"
                    required
                  />
                </div>
              </div>
  
              <div className="mb-6">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="password"
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="••••••••"
                    required
                  />
                </div>
              </div>
  
              <button
                type="submit"
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <>
                    {mode === 'login' ? 'Sign In' : 'Create Account'}
                    <ArrowRight className="ml-2 h-5 w-5" />
                  </>
                )}
              </button>
  
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-300"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-white text-gray-500">
                      Or continue with
                    </span>
                  </div>
                </div>
  
                <div className="mt-6 grid grid-cols-2 gap-3">
                  <button
                    type="button"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-center"
                  >
                    <Github className="h-5 w-5 mr-2" />
                    Github
                  </button>
                  <button
                    type="button"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-center"
                  >
                    <Twitter className="h-5 w-5 mr-2" />
                    Twitter
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
  
        <p className="text-center mt-4 text-sm text-gray-600">
          {mode === 'login' ? "Don't have an account? " : 'Already have an account? '}
          <button
            onClick={() => setMode(mode === 'login' ? 'signup' : 'login')}
            className="text-blue-600 hover:underline font-medium"
          >
            {mode === 'login' ? 'Sign up' : 'Sign in'}
          </button>
        </p>
      </div>
    );
  }`,
        description: "",
        id: "920476e9-0140-4107-814b-d12c28719801",
        path: "src/components/AuthForm.tsx",
        status: "completed",
        title: "Create src/components/AuthForm.tsx",
        type: "CreateFile",
      },
      {
        code: `import AuthForm from './components/AuthForm';
  
  function App() {
    return (
      <div 
        className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 flex items-center justify-center p-4"
        style={{
          backgroundImage: \`url('https://images.unsplash.com/photo-1634655377962-e6e7b446e7e9?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3')\`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      >
        <div className="absolute inset-0 bg-white/30 backdrop-blur-sm" />
        <div className="relative">
          <AuthForm />
        </div>
      </div>
    );
  }
  
  export default App;`,
        description: "",
        id: "f0e6327d-7a10-4086-86eb-11b08c7081a2",
        path: "src/App.tsx",
        status: "completed",
        title: "Create src/App.tsx",
        type: "CreateFile",
      },
    ],
  }